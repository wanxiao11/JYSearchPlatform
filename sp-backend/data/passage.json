{
  "code": 0,
  "data": {
    "records": [
      {
        "id": "1767049141185273857",
        "title": "WebSocket 在 JS 中的使用以及在 SpringBoot 中整合 WebSocket",
        "description": "WebSocket 在 JS 以及 SpringBoot 中的使用",
        "content": "# 前端 WebSocket 的一些使用\n\nWebSocket 是一种网络通信协议，用于实现双向通信。在前端中，你可以使用 JavaScript 中的 `WebSocket` 对象来创建 WebSocket 连接，发送和接收数据。\n\n## 连接的建立\n\n通过创建一个 WebSocket 对象建立一个 WebSocket 连接\n\n例如：\n\n```js\nconst ws = new WebSocket('ws://localhost:8080/channel/echo');\n```\n\n传给对象的参数是通过 WebSocket 协议通讯的网络地址。\n\n## 接收消息\n\n接收消息这里指的是接收服务端的消息。\n\n这里有两种方法。\n\n1. **使用 `addEventListener`**： 你可以使用 `addEventListener` 来监听 `message` 事件，这是最常见的方式，也是推荐的做法。\n\n    ```javascript\n    ws.addEventListener('message', (event) => {\n        const receivedMessage = event.data;\n        console.log('Received message from server:', receivedMessage);\n        // 在这里处理接收到的消息\n    });\n    ```\n\n2. **使用 `onmessage` 属性**： 除了使用 `addEventListener`，你还可以直接设置 `onmessage` 属性来指定消息处理函数。这与之前的示例相似，但更简洁：\n\n    ```javascript\n    ws.onmessage = function (event) {\n        const receivedMessage = event.data;\n        console.log('Received message from server:', receivedMessage);\n        // 在这里处理接收到的消息\n    };\n    ```\n\n## 发送消息\n\n**发送消息到服务器**： 使用 `send()` 方法将消息发送到服务器：\n\n```javascript\nws.send('Hello, server!'); // 发送消息给服务器\n```\n\n## 关闭连接\n\n**关闭 WebSocket 连接**： 要关闭 WebSocket 连接，你可以简单地使用 `WebSocket.close()` 方法，例如：\n\n```javascript\nws.close();\n```\n\n如果 WebSocket 连接的 `readyState` 已经处于 `CLOSE` 状态，那么该方法不会执行任何操作\n\n检查 WebSocket 是否打开： 你可以通过检查 `WebSocket` 的 `readyState` 属性来判断 WebSocket 是否打开。如果 `readyState` 的值为 `WebSocket.OPEN`，则表示连接已打开：\n\n```javascript\nif (ws.readyState === WebSocket.OPEN) {\n    // WebSocket 连接已打开\n}\n```\n\n这样你就可以在代码中判断 WebSocket 是否处于打开状态了\n\n## 处理\n\n**处理连接状态**： 你可以监听其他事件，例如 `open`、`close` 和 `error`，以处理连接的不同状态：\n\n```javascript\nws.addEventListener('open', (event) => {\n    console.log('WebSocket 已连接');\n});\n\nws.addEventListener('close', (event) => {\n    console.log('WebSocket 连接已关闭');\n});\n\nws.addEventListener('error', (event) => {\n    console.error('WebSocket 连接出现异常:', event.error);\n});\n```\n\n\n\n同样可以使用onclose 、 onerror 、 onopen 属性定义时间监听函数。\n\n# 在 Spring Boot 中整合、使用 WebSocket\n\nWebSocket 是一种基于 TCP 协议的全双工通信协议，它允许客户端和服务器之间建立持久的、双向的通信连接。相比传统的 HTTP 请求 - 响应模式，WebSocket 提供了实时、低延迟的数据传输能力。通过 WebSocket，客户端和服务器可以在任意时间点互相发送消息，实现实时更新和即时通信的功能。WebSocket 协议经过了多个浏览器和服务器的支持，成为了现代 Web 应用中常用的通信协议之一。它广泛应用于聊天应用、实时数据更新、多人游戏等场景，为 Web 应用提供了更好的用户体验和更高效的数据传输方式。\n\n本文将会指导你如何在 Spring Boot 中整合、使用 WebSocket，以及如何在 `@ServerEndpoint` 类中注入其他 Bean 依赖 。\n\n在 Spring Boot 中使用 WebSocket 有 2 种方式。第 1 种是使用由 Jakarta EE 规范提供的 Api，也就是 `jakarta.websocket` 包下的接口。第 2 种是使用 spring 提供的支持，也就是 [`spring-websocket`](https://github.com/spring-projects/spring-framework/tree/main/spring-websocket) 模块。前者是一种独立于框架的技术规范，而后者是 Spring 生态系统的一部分，可以与其他 Spring 模块（如 Spring MVC、Spring Security）无缝集成，共享其配置和功能。\n\n2 种方式各有优劣，你可以按需选择。本文将使用第 1 种方式，也就是使用 `jakarta.websocket` 来开发 WebSocket 应用。\n\n软件版本：\n\n- Spring Boot：`3.1.3`\n\n## 在 Spring Boot 中整合 WebSocket\n\n### 添加依赖\n\n在 `pom.xml` 中添加 `spring-boot-starter-websocket` 依赖。\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-websocket</artifactId>\n</dependency>\n```\n\n### 开发 ServerEndpoint 端点\n\n服务端 WebSocket 端点的开发也有 2 种方式。第 1 种是实现规范所提供的各种接口，通过接口定义的回调方法来处理新的连接、客户端消息、连接断开等等事件。另一种方式是使用注解，类似于 Spring 中的 Controller，通过在方法上使用不同的注解来监听不同的 WebSocket 事件，灵活性比较高，推荐使用。\n\n我们打算创建一个 `echo` 端点，该端点会处理客户端的连接、断开、消息事件。在收到消息后，我们会在消息前面加上服务器时间戳和 `Hello` 前缀，原样写回给客户端。如果客户端发送的消息为 `bye`，则服务器会主动断开与客户端的连接。\n\n```java\npackage cn.springdoc.demo.channel;\n\nimport java.io.IOException;\nimport java.time.Instant;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport jakarta.websocket.CloseReason;\nimport jakarta.websocket.EndpointConfig;\nimport jakarta.websocket.OnClose;\nimport jakarta.websocket.OnError;\nimport jakarta.websocket.OnMessage;\nimport jakarta.websocket.OnOpen;\nimport jakarta.websocket.Session;\nimport jakarta.websocket.server.ServerEndpoint;\n\n// 使用 @ServerEndpoint 注解表示此类是一个 WebSocket 端点\n// 通过 value 注解，指定 websocket 的路径\n@ServerEndpoint(value = \"/channel/echo\")\npublic class EchoChannel {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(EchoChannel.class);\n\n    private Session session;\n\n    // 收到消息\n    @OnMessage\n    public void onMessage(String message) throws IOException{\n        \n        LOGGER.info(\"[websocket] 收到消息：id={}，message={}\", this.session.getId(), message);\n        \n        if (message.equalsIgnoreCase(\"bye\")) {\n            // 由服务器主动关闭连接。状态码为 NORMAL_CLOSURE（正常关闭）。\n            this.session.close(new CloseReason(CloseReason.CloseCodes.NORMAL_CLOSURE, \"Bye\"));;\n            return;\n        }\n        \n        \n        this.session.getAsyncRemote().sendText(\"[\"+ Instant.now().toEpochMilli() +\"] Hello \" + message);\n    }\n\n    // 连接打开\n    @OnOpen\n    public void onOpen(Session session, EndpointConfig endpointConfig){\n        // 保存 session 到对象\n        this.session = session;\n        LOGGER.info(\"[websocket] 新的连接：id={}\", this.session.getId());\n    }\n\n    // 连接关闭\n    @OnClose\n    public void onClose(CloseReason closeReason){\n        LOGGER.info(\"[websocket] 连接断开：id={}，reason={}\", this.session.getId(),closeReason);\n    }\n\n    // 连接异常\n    @OnError\n    public void onError(Throwable throwable) throws IOException {\n        \n        LOGGER.info(\"[websocket] 连接异常：id={}，throwable={}\", this.session.getId(), throwable.getMessage());\n        \n        // 关闭连接。状态码为 UNEXPECTED_CONDITION（意料之外的异常）\n        this.session.close(new CloseReason(CloseReason.CloseCodes.UNEXPECTED_CONDITION, throwable.getMessage()));\n    }\n}\n```\n\n首先，使用 `@ServerEndpoint` 注解表示此类是一个 WebSocket 端点，`value` 属性是必须的，用于设置路由。它还有其他的一些可选属性可以用于自定义子协议、消息编码器、消息解码器、握手处理器等等，篇幅原因这里不展开。\n\n#### @OnMessage\n\n`@OnMessage` 注解用于监听客户端消息事件，它只有一个属性 `long maxMessageSize() default -1;` 用于限制客户端消息的大小，如果小于等于 0 则表示不限制。当客户端消息体积超过这个阈值，那么服务器就会主动断开连接，状态码为：`1009`。方法的参数可以是基本的 `String` / `byte[]` 或者是 `Reader` / `InputStream`，分别表示 WebSocket 中的文本和二进制消息。也可以是自定义的 Java 对象，但是需要在 `@ServerEndpoint` 中配置对象的解码器（`jakarta.websocket.Decoder`）。对于内容较长的消息，支持分批发送，可以在消息参数后面定义一个布尔类型的 `boolean last`参数，如果该值为 `true` 则表示此消息是批次消息中的最后一条。\n\n```java\n@OnMessage\npublic void onMessage(String message, boolean last) throws IOException{\n    if (last) {\n            // 这是批量消息的最后一条\n    }\n}\n```\n\n#### @OnOpen\n\n`@OnOpen` 方法用于监听客户端的连接事件，它没有任何属性。可以作为方法参数的对象有很多，`Session` 对象是必须的，表示当前连接对象，我们可以通过此对象来执行发送消息、断开连接等操作。WebSocket 的连接 URL，类似于 Http 的 URL，也可以传递查询参数、path 参数。通常用于传递认证、鉴权用的 Token 或其他信息。\n\n要获取查询参数，我们可以通过 `Session` 的 `getRequestParameterMap();` 获取。\n\n```java\nMap<String, List<String>> query = session.getRequestParameterMap();\n```\n\n要获取 path 参数，首先要在 `@ServerEndpoint` 中定义 path 参数，类似于 Spring Mvc 的 path 参数定义。例如： `@ServerEndpoint(value = \"/channel/echo/{id}\")`。那么我们可以在 `@OnOpen` 方法中使用 `@PathParam` 注解接收，如下：\n\n```java\n@ServerEndpoint(value = \"/channel/echo/{id}\")\n\n...\n\n@OnOpen\npublic void onOpen(Session session, @PathParam(\"id\") Long id, EndpointConfig endpointConfig){\n    ....\n}\n```\n\n示例中的最后一个参数 `EndpointConfig` ，它是可选，用于获取全局的一些配置。在本文中未用到。\n\n#### @OnClose\n\n`@OnClose` 用于处理连接断开事件，参数中可以指定一个 `CloseReason` 对象，它封装了断开连接的状态码、原因信息。\n\n#### @OnError\n\n`@OnError` 用于处理异常事件，**该方法必须要有一个 `Throwable` 类型的参数**，表示发生的异常。否则应用会启用失败：\n\n```txt\nCaused by: jakarta.websocket.DeploymentException: No Throwable parameter was present on the method [onError] of class [cn.springdoc.demo.channel.EchoChannel] that was annotated with OnError\n    at org.apache.tomcat.websocket.pojo.PojoMethodMapping.getPathParams(PojoMethodMapping.java:311) ~[tomcat-embed-websocket-10.1.12.jar:10.1.12]\n    at org.apache.tomcat.websocket.pojo.PojoMethodMapping.<init>(PojoMethodMapping.java:194) ~[tomcat-embed-websocket-10.1.12.jar:10.1.12]\n    at org.apache.tomcat.websocket.server.WsServerContainer.addEndpoint(WsServerContainer.java:130) ~[tomcat-embed-websocket-10.1.12.jar:10.1.12]\n    at org.apache.tomcat.websocket.server.WsServerContainer.addEndpoint(WsServerContainer.java:240) ~[tomcat-embed-websocket-10.1.12.jar:10.1.12]\n    at org.apache.tomcat.websocket.server.WsServerContainer.addEndpoint(WsServerContainer.java:198) ~[tomcat-embed-websocket-10.1.12.jar:10.1.12]\n    at org.springframework.web.socket.server.standard.ServerEndpointExporter.registerEndpoint(ServerEndpointExporter.java:156) ~[spring-websocket-6.0.11.jar:6.0.11]\n    ... 12 common frames omitted\n```\n\n所有事件方法，都支持使用 `Session` 作为参数，表示当前连接参数。但是为了更加方便，我们在 `@OnOpen` 事件中直接把 `Session` 存储到了当前对象中，可以在任意方法中使用 `this` 访问。服务器会为每个连接创建一个端点对象，所以这是线程安全的。\n\n上面还提到了一个 “连接关闭状态码”，WebSocket 协议定义了一系列状态码来表示连接断开的原因，这些状态码定义在了 `CloseReason.CloseCodes` 枚举中。\n\n### 配置 ServerEndpointExporter\n\n定义好端点后，需要在配置类中通过定义 `ServerEndpointExporter` Bean 进行注册。\n\n```java\npackage cn.springdoc.demo.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.socket.server.standard.ServerEndpointExporter;\n\nimport cn.springdoc.demo.channel.EchoChannel;\n\n@Configuration\npublic class WebSocketConfiguration {\n\n    @Bean  \n    public ServerEndpointExporter serverEndpointExporter (){\n        \n        ServerEndpointExporter exporter = new ServerEndpointExporter();\n        \n        // 手动注册 WebSocket 端点\n        exporter.setAnnotatedEndpointClasses(EchoChannel.class);\n        \n        return exporter;\n    }  \n}\n```\n\n你也可以在 WebSocket 端点上添加 `@Component` 注解，使用 Spring 自动扫描，这样的话不需要手动调用 `setAnnotatedEndpointClasses` 方法进行注册。\n\n## 测试\n\n在项目的 `src/main/resources` 目录下创建一个 `public` 文件夹，再在此文件夹中新建一个 `index.html` 文件，作为 WebSocket 客户端。内容如下：\n\n> Spring Boot 默认会把 `public` 目录下的 `index.html` 作为应用主页。\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>WebSocket</title>\n</head>\n<body>\n    <script type=\"text/javascript\">\n        let websocket = new WebSocket(\"ws://localhost:8080/channel/echo\");\n        \n        // 连接断开\n        websocket.onclose = e => {\n            console.log(`连接关闭: code=${e.code}, reason=${e.reason}`)\n        }\n        // 收到消息\n        websocket.onmessage = e => {\n            console.log(`收到消息：${e.data}`);\n        }\n        // 异常\n        websocket.onerror = e => {\n            console.log(\"连接异常\")\n            console.error(e)\n        }\n        // 连接打开\n        websocket.onopen = e => {\n            console.log(\"连接打开\");\n            \n            // 创建连接后，往服务器连续写入3条消息\n            websocket.send(\"sprigdoc.cn\");\n            websocket.send(\"sprigdoc.cn\");\n            websocket.send(\"sprigdoc.cn\");\n            \n            // 最后发送 bye，由服务器断开连接\n            websocket.send(\"bye\");\n            \n            // 也可以由客户端主动断开\n            // websocket.close();\n        }\n    </script>\n</body>\n</html>\n```\n\n内容很简单，网页加载后运行 Javascript 代码。立即创建与 `ws://localhost:8080/channel/echo` 的 WebSocket 连接对象，通过注册对象的各种监听方法来处理事件。\n\n在连接就绪后，也就是在 `onopen` 方法中往服务器端点发送了 3 条消息。按照逻辑，服务端也会回复 3 条消息，这会触发 `onmessage` 事件，把消息内容输出到控制台。最后，发送 `bye`，服务器收到消息后会主动断开连接，这就会触发 `onclose` 事件，把 “连接关闭状态码” 和原因输出到控制台。\n\n> 其实你可以直接把这段 Javascript 代码复制到任意支持 WebSocket 的浏览器的控制台执行，WebSocket 没有跨域的说法！\n\n启动应用，打开浏览器（先打开控制台），然后访问 `http://localhost:8080/`，查看控制台输出的日志：\n\n```txt\n连接打开\n收到消息：[1694505275009] Hello sprigdoc.cn\n收到消息：[1694505275012] Hello sprigdoc.cn\n收到消息：[1694505275014] Hello sprigdoc.cn\n连接关闭: code=1000, reason=Bye\n```\n\n再看看服务端控制台日志：\n\n```txt\ncn.springdoc.demo.channel.EchoChannel    : [websocket] 新的连接：id=0\ncn.springdoc.demo.channel.EchoChannel    : [websocket] 收到消息：id=0，message=sprigdoc.cn\ncn.springdoc.demo.channel.EchoChannel    : [websocket] 收到消息：id=0，message=sprigdoc.cn\ncn.springdoc.demo.channel.EchoChannel    : [websocket] 收到消息：id=0，message=sprigdoc.cn\ncn.springdoc.demo.channel.EchoChannel    : [websocket] 收到消息：id=0，message=bye\ncn.springdoc.demo.channel.EchoChannel    : [websocket] 连接断开：id=0，reason=CloseReason: code [1000], reason [Bye]\n```\n\n没有任何问题，一切按照我们预定义的逻辑在运行。客户端发送 3 条消息，服务器响应 3 条消息，最后断开连接。客户端、服务器相应的事件方法都成功执行。\n\n服务端日志中的 sessionId（`id=0`），是通过 `Session` 的 `String getId();` 方法获取的。服务器会为每个连接分配一个不同的 id 值，不同服务器生成的 id 类型不一样。 Tomcat 使用从 0 开始的自增值（本例），Undertow 使用的是类似于 UUID 的 32 位长度的字符串。\n\n## 在端点中注入 Bean\n\n往往我们需要在端点中使用其他 Spring 管理的 Bean 来完成业务，例如认证、鉴权、保存消息。。。等等。\n\n假如我们有一个 `UserService` 服务类，内容如下：\n\n```java\npackage cn.springdoc.demo.service;\n\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class UserService {\n    public void foo() {}\n\n    // ....\n}\n```\n\n我们现在要在端点中注入使用它，很多人会直接在端点类上使用 `@Component` 注解，然后注入：\n\n```java\n@ServerEndpoint(value = \"/channel/echo\")\n@Component  // 注册为 Spring 组件\npublic class EchoChannel {\n\n    @Autowired // 注入需要的 Bean\n    private UserService userService;\n\n    // ...\n\n    @OnOpen\n    public void onOpen(Session session, EndpointConfig endpointConfig){\n\n        this.session = session;\n\n        // 在业务中使用\n        this.userService.foo();\n    }\n}\n```\n\n服务可以正常启动，看似一切都没问题！可是当你在事件方法中使用这 Bean 的时候就会导致 `NullPointerException` 异常。\n\n```txt\njava.lang.NullPointerException: Cannot invoke \"cn.springdoc.demo.service.UserService.foo()\" because \"this.userService\" is null\n    at cn.springdoc.demo.channel.EchoChannel.onOpen(EchoChannel.java:54)\n    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n    at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.base/java.lang.reflect.Method.invoke(Method.java:568)\n    at org.apache.tomcat.websocket.pojo.PojoEndpointBase.doOnOpen(PojoEndpointBase.java:67)\n    at org.apache.tomcat.websocket.pojo.PojoEndpointServer.onOpen(PojoEndpointServer.java:46)\n    at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.init(WsHttpUpgradeHandler.java:131)\n    at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:936)\n    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)\n    at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\n    at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\n    at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\n    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n    at java.base/java.lang.Thread.run(Thread.java:833)\n```\n\n**原因：运行时的 WebSocket 连接对象，也就是端点实例，是由服务器创建，而不是 Spring，所以不能使用自动装配**。上文也提到过 “服务器会为每个连接创建一个端点实例对象”。\n\n知道了原因后，解决办法也很简单，我们可以使用 Spring 的 `ApplicationContextAware` 接口，在应用启动时获取到 `ApplicationContext` 并且保存在全局静态变量中。\n\n服务器每次创建连接的时候，我们就在 `@OnOpen` 事件方法中从 `ApplicationContext` 获取到需要 Bean 来初始化端点对象。\n\n```java\n@ServerEndpoint(value = \"/channel/echo\")\n@Component  // 由 spring 扫描管理\npublic class EchoChannel implements\n                ApplicationContextAware { // 实现 ApplicationContextAware 接口， Spring 会在运行时注入 ApplicationContext\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(EchoChannel.class);\n\n    // 全局静态变量，保存 ApplicationContext\n    private static ApplicationContext applicationContext;\n\n    private Session session;\n\n    // 声明需要的 Bean\n    private UserService userService;\n\n\n    // 保存 Spring 注入的 ApplicationContext 到静态变量\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        EchoChannel.applicationContext = applicationContext;\n    }\n\n    @OnOpen\n    public void onOpen(Session session, EndpointConfig endpointConfig){\n        \n        // 保存 session 到对象\n        this.session = session;\n        \n        // 连接创建的时候，从 ApplicationContext 获取到 Bean 进行初始化\n        this.userService = EchoChannel.applicationContext.getBean(UserService.class);\n        \n        // 在业务中使用\n        this.userService.foo();\n        \n        LOGGER.info(\"[websocket] 新的连接：id={}\", this.session.getId());\n    }\n    // ....\n}\n```\n\n`onOpen` 方法在整个连接的生命周期中，只会执行一次，所以这种方式不会带来通信时的性能损耗。",
        "category": "文章",
        "cover": null,
        "language": null,
        "externalLink": null,
        "componentName": null,
        "viewNum": 24,
        "thumbNum": 4,
        "favourNum": 1,
        "commentNum": 0,
        "priority": 0,
        "userId": "1645799822881509377",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2024-03-11 12:45:20",
        "updateTime": "2024-03-12 20:28:21",
        "user": {
          "id": "1645799822881509377",
          "planetCode": "14255",
          "userName": "为",
          "userAvatar": null,
          "gender": 1,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": null,
          "goal": null,
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 0,
          "followNum": 1,
          "followStatus": null,
          "vipExpireTime": "2024-10-01 21:19:43",
          "lastLoginTime": null,
          "createTime": "2023-04-11 22:43:49",
          "updateTime": "2024-01-30 14:21:10"
        },
        "tags": [
          "文章",
          "Java",
          "Spring",
          "Javascript"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1766505151381757954",
        "title": "大三-前端-简历",
        "description": "简历优化",
        "content": "鱼皮哥好，目前大三，我暂时的计划是尽快找到一个日常实习，然后过两个月尝试投递一下大厂的暑期实习碰碰运气。\n\n目前进度：基本的八股过了一遍，但记得不太熟。算法过了200题左右(基本都是看完题解做出来的)，目前在刷hot100，水平很低，自己基本只能做出简单题\n\n我的问题：\n\n1.日常实习如果找不到中厂是否要去小公司，还是在校全力复习?\n\n2.因为我目前两个项目有一定的重合，使用我打算再做一个组件库的项目，那么我平时的时间分配应该是什么样的比较合适?(算法，八股，项目)\n\n3.针对刷完算法题过几天又做不出来有没有什么好的解决办法?\n\n4.能否帮我看下简历哪里可以优化更改?\n\n感激不尽!!\n\n这是简历的网址\nhttps://laoyujianli.com/share/5xYS9y",
        "category": "文章",
        "cover": null,
        "language": null,
        "externalLink": null,
        "componentName": null,
        "viewNum": 53,
        "thumbNum": 1,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1627610445147820034",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2024-03-10 00:43:42",
        "updateTime": "2024-03-12 20:56:55",
        "user": {
          "id": "1627610445147820034",
          "planetCode": "17162",
          "userName": "123",
          "userAvatar": "https://thirdwx.qlogo.cn/mmopen/vi_32/icQKKMxDAwNIq0QZb0mdiaRVeUgDsGlY2zu4ddJVXib00KyThjjRv7sB9NZMrniaiboN1V2Jx8daMrha4EJTWYNtvPA/132",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": null,
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": null,
          "goal": null,
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 0,
          "followNum": 0,
          "followStatus": null,
          "vipExpireTime": "2025-03-09 14:07:37",
          "lastLoginTime": null,
          "createTime": "2023-02-20 18:05:44",
          "updateTime": "2024-03-09 14:33:21"
        },
        "tags": [
          "文章"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1766462201104818178",
        "title": "求老鱼帮忙看看简历",
        "description": null,
        "content": "老鱼帮忙看看简历! 现在大三准备投暑假实习,老鱼帮着看看一下简历给一下修改意见呗\n\n![0a510843349b3993b3484fb60ec9798.jpg](https://pic.code-nav.cn/post_picture/1766353316016676865/eTVrD1kG-0a510843349b3993b3484fb60ec9798.jpg)",
        "category": "文章",
        "cover": null,
        "language": null,
        "externalLink": null,
        "componentName": null,
        "viewNum": 58,
        "thumbNum": 1,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1766353316016676865",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2024-03-09 21:53:02",
        "updateTime": "2024-03-12 20:57:44",
        "user": {
          "id": "1766353316016676865",
          "planetCode": null,
          "userName": "无名",
          "userAvatar": null,
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": null,
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": null,
          "goal": null,
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 0,
          "followNum": 1,
          "followStatus": null,
          "vipExpireTime": "2024-04-08 14:44:24",
          "lastLoginTime": null,
          "createTime": "2024-03-09 14:40:22",
          "updateTime": "2024-03-10 20:39:54"
        },
        "tags": [
          "文章",
          "简历"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1765978864430997505",
        "title": "前端-2年-社招简历",
        "description": "在公司一直开发的是内部项目，没法直接上项目链接，希望老鱼能帮忙指点一下简历",
        "content": "在公司一直开发的是内部项目，没法直接上项目链接，希望老鱼能帮忙指点一下简历。\n是不是可以写一个在线文档去介绍一下项目？<br>\n开发时要兼容公司内部框架，所以一直在用Vue2开发，Vue3只是了解，并没有实际开发经验，现在时间有点紧，周围朋友也反应大环境不好，即将失业，在此阶段不知如何破局。\n\n![脱敏简历-2024.jpg](https://pic.code-nav.cn/post_picture/1622856850892406785/Bap9UqYV-脱敏简历-2024.jpg)",
        "category": "文章",
        "cover": null,
        "language": null,
        "externalLink": null,
        "componentName": null,
        "viewNum": 70,
        "thumbNum": 1,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1622856850892406785",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2024-03-08 13:52:26",
        "updateTime": "2024-03-12 20:27:06",
        "user": {
          "id": "1622856850892406785",
          "planetCode": "16149",
          "userName": "逃跑的年糕Gao",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1622856850892406785/qCuMAVUv-头像2.jpg",
          "gender": 1,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": "北京市",
          "birthday": null,
          "school": null,
          "major": null,
          "education": "本科",
          "graduationYear": 2023,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": 1,
          "direction": "前端",
          "goal": null,
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 0,
          "followNum": 1,
          "followStatus": null,
          "vipExpireTime": "2025-03-05 21:18:28",
          "lastLoginTime": null,
          "createTime": "2023-02-07 15:16:39",
          "updateTime": "2024-03-05 21:39:08"
        },
        "tags": [
          "文章",
          "简历"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1765375786157727745",
        "title": "java-社招-简历",
        "description": "简历优化找工作",
        "content": "鱼皮哥你好，我毕业工作将近两年了，我主要学的后端，前端也会写一点，目前这个公司环境很安逸，学习不到什么东西工资也不高，所以我想跳槽，最近一直在改简历，但是总是感觉写出来的简历不好，不太会写，希望你可以帮忙看看给点建议，谢谢！\n\n![Snipaste_2024-03-06_21-53-57.png](https://pic.code-nav.cn/post_picture/1694577557069996034/JzIzBBq0-Snipaste_2024-03-06_21-53-57.png)\n\n![Snipaste_2024-03-06_21-54-12.png](https://pic.code-nav.cn/post_picture/1694577557069996034/IsVMKLIt-Snipaste_2024-03-06_21-54-12.png)\n\n\n![Snipaste_2024-03-06_21-54-21.png](https://pic.code-nav.cn/post_picture/1694577557069996034/6He62yym-Snipaste_2024-03-06_21-54-21.png)",
        "category": "文章",
        "cover": null,
        "language": null,
        "externalLink": null,
        "componentName": null,
        "viewNum": 113,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1694577557069996034",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2024-03-06 21:56:01",
        "updateTime": "2024-03-12 20:58:31",
        "user": {
          "id": "1694577557069996034",
          "planetCode": "26220",
          "userName": "逸",
          "userAvatar": null,
          "gender": 1,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": null,
          "goal": null,
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 0,
          "followNum": 0,
          "followStatus": null,
          "vipExpireTime": "2024-08-22 17:16:55",
          "lastLoginTime": null,
          "createTime": "2023-08-24 13:09:07",
          "updateTime": "2024-03-10 18:33:19"
        },
        "tags": [
          "文章",
          "简历"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1762409253202681858",
        "title": "Redis学习（List 、Hash）",
        "description": null,
        "content": "### Redis列表(List)\n\nRedis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部或尾部（两端都可以添加）。 \n\nRedis List列表的底层是双端链表，最多可以包含2^32-1个元素，主要操作是push/pop等，一般用在栈、队列、消息队列等场景。\n\nPS：List结构是单key多value，如果键不存在，创建新的链表；如果键已存在，新增内容；如果值全移除，对应的键也就消失了。由于List的底层是一个双向列表，因此其对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。\n\n#### 常用命令\n\n1. 创建list以及查看list\n\n   - lpush\n\n     > lpush命令将一个或多个值插入到列表的头部，如果key不存在，一个空列表会被创建并执行lpush命令，返回值为执行lpush命令后列表的长度，如果key存在但不是列表类型时，返回一个错误提示。\n\n     基本语法：\n\n     ```shell\n     lpush key_name value1...valueX\n     ```\n\n     示例代码：\n\n     ```shell\n     redis 127.0.0.1:6379> LPUSH list1 \"foo\"\n     (integer) 1\n     ```\n\n   - rpush\n\n     > lpush会将一个或多个值插入到列表的尾部（最右边）。如果key不存在，一个空列表会被创建并执行rpush命令，返回值为执行rpush命令后列表的长度，如果key存在但不是列表类型时，返回一个错误提示。\n\n     基本语法：\n\n     ```shell\n     rpush key_name value1...valueX\n     ```\n\n     示例代码：\n\n     ```shel\n     redis 127.0.0.1:6379> RPUSH mylist \"hello\"\n     (integer) 1\n     ```\n\n   - lrange\n\n     > lrange返回列表中指定区间内的元素，区间以偏移量start和end指定。其中0代表列表中的第一个元素，1代表列表中的第二个元素，以此类推。除此以外，你也可以负数下标，-1代表列表中的最后一个元素，-2代表列表中的倒数第二个元素，以此类推。\n\n     基本语法：\n\n     ```shell\n     lrange key_name start end\n     ```\n\n     示例代码：\n\n     ```shell\n     redis 127.0.0.1:6379> LPUSH list1 \"foo\"\n     (integer) 1\n     redis 127.0.0.1:6379> LPUSH list1 \"bar\"\n     (integer) 2\n     redis 127.0.0.1:6379> LRANGE list1 0 -1\n     1) \"foo\"\n     2) \"bar\"\n     ```\n\n2. 移除并获取List中的元素\n\n   - lpop\n\n     > lpop命令用于移除并返回列表中的第一个元素。当列表key不存在时，返回nil。\n\n     基本语法：\n\n     ```shell\n     lpop key_name\n     ```\n\n     示例代码：\n\n     ```shell\n     redis 127.0.0.1:6379> lpush list1 1 2 3 4 5\n     (integer) 5\n     redis 127.0.0.1:6379> lpop list1\n     5\n     ```\n\n   - rpop\n\n     > rpop命令用于移除并返回列表中的最后一个元素。当列表key不存在时，返回nil。\n\n     基本语法：\n\n     ```shell\n     rpop key_name\n     ```\n\n     示例代码：\n\n     ```shell\n     redis 127.0.0.1:6379> lpush list1 1 2 3 4 5\n     (integer) 5\n     redis 127.0.0.1:6379> rpop list1\n     1\n     ```\n\n     \n\n3. 通过索引获取列表中的元素(lindex)\n\n   > lindex命令用于通过索引获取列表中的元素。索引也可以采用负数，-1代表列表中的最后一个元素，-2代表列表中的倒数第二个元素。返回值为列表中下标为指定索引值的元素，如果指定索引值不在列表的区间范围内，返回nil。\n\n   基本语法：\n\n   ```shell\n   lindex key_name index_position\n   ```\n\n   示例代码：\n\n   ```shell\n   redis 127.0.0.1:6379> lpush list1 1 2 3 4 5\n   (integer) 5\n   redis 127.0.0.1:6379> lindex list1 1\n   4\n   ```\n\n4. 获取列表长度(llen)\n\n   > llen命令用于返回列表的长度，如果列表key不存在，则key被解释为一个空列表，返回0；如果key不是列表类型，返回一个错误。\n\n   基本语法：\n\n   ```shell\n   llen key_name\n   ```\n\n   示例代码：\n\n   ```shell\n   redis 127.0.0.1:6379> lpush list1 1 2 3 4 5\n   (integer) 5\n   redis 127.0.0.1:6379> llen list1\n   5\n   ```\n\n5. 移除列表元素(lrem)\n\n   > lrem命令用于移除列表中参数count个值为value的元素。返回值为被移除元素的数量，如果列表不存在，则返回0。\n   >\n   > count = 0时，移除列表中所有与value相等的元素。\n   >\n   > 当count>0时，从表头开始向表尾搜索，移除与value相等的元素，数量为count。\n   >\n   > 当count<0时，从表尾开始向表头搜索，移除与value相等的元素，数量为count。\n\n   基本语法：\n\n   ```shell\n   lrem key_name count value\n   ```\n\n   示例代码：\n\n   ```shell\n   redis 127.0.0.1:6379> lpush list1 1 1 1 1 2 3 4 5\n   (integer) 8\n   redis 127.0.0.1:6379> lrem list1 2 1\n   2\n   ```\n\n6. 截取指定范围的值后再赋值给key(ltrim)\n\n   > ltrim对一个列表进行修剪，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。下标 0 表示列表的第一个元素，以 1 表示列表的第二个元素，以此类推。 你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。命令执行成功时，返回 ok 。\n\n   基本语法：\n\n   ```shell\n   ltrim key_name start stop\n   ```\n\n   示例代码：\n\n   ```shell\n   redis 127.0.0.1:6379> lpush list1 1 2 3 4 5 6\n   (integer) 6\n   redis 127.0.0.1:6379> ltrim list1 1 3\n   ok\n   ```\n\n7. rpoplpush 源列表 目的列表\n\n   > 移除列表的最后一个元素，并将该元素添加到另一个列表并返回。返回值为被移除的元素。\n\n   基本语法：\n\n   ```shell\n   rpoplpush source_key_name destination_key_name\n   ```\n\n   示例代码：\n\n   ```shell\n   redis 127.0.0.1:6379> lpush list1 1 2 3\n   (integer) 3\n   redis 127.0.0.1:6379> lpush list2 4 5 6\n   (integer) 3\n   redis 127.0.0.1:6379> rpoplpush list1 list2\n   3\n   ```\n\n8. 通过索引设置列表元素的值\n\n   > lset命令用于通过索引来设置元素的值。当索引超过范围，或对一个空的列表进行lset，会返回一个错误，操作成功时，会返回ok。\n\n   基本语法：\n\n   ```shell\n   lset key_name index value\n   ```\n\n   示例代码：\n\n   ```shell\n   redis 127.0.0.1:6379> lpush list1 1 2 3 4 5 6\n   (integer) 6\n   redis 127.0.0.1:6379> lset list1 1 8\n   ok\n   ```\n\n9. 在列表的元素前或者后插入元素\n\n   > Redis Linsert 命令用于在列表的元素前或者后插入元素。 当指定元素不存在于列表中时，不执行任何操作。 当列表不存在时，被视为空列表，不执行任何操作。 如果 key 不是列表类型，返回一个错误。如果命令执行成功，返回插入操作完成之后，列表的长度。 如果没有找到指定元素 ，返回 -1 。 如果 key 不存在或为空列表，返回 0 。\n\n   基本语法：\n\n   ```shell\n    LINSERT KEY_NAME BEFORE EXISTING_VALUE NEW_VALUE \n   ```\n\n   ### 实例\n\n   ```\n   redis 127.0.0.1:6379> RPUSH list1 \"foo\"\n   (integer) 1\n   redis 127.0.0.1:6379> RPUSH list1 \"bar\"\n   (integer) 2\n   redis 127.0.0.1:6379> LINSERT list1 BEFORE \"bar\" \"Yes\"\n   (integer) 3\n   redis 127.0.0.1:6379> LRANGE mylist 0 -1\n   1) \"foo\"\n   2) \"Yes\"\n   3) \"bar\"\n   ```\n\n### Redis哈希表(Hash)\n\nRedis hash 是一个 string 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于存储对象。\n\nRedis 中每个 hash 可以存储 2^32 - 1 键值对（40多亿）\n\n#### 常用命令\n\n1. hset/hget/hmset/hmget/hgetall/hdel\n\n   - hset\n\n     > hset命令用于为哈希表中的字段赋值。如果哈希表不存在，一个新的哈希表会被创建并进行hset操作；如果字段已经存在于哈希表中，旧值会被新值覆盖。如果字段是哈希表中的一个新的字段，并且设置值成功，返回1。如果哈希表中字段已经存在且旧值已经被覆盖，则返回0。\n\n     基本语法：\n\n     ```shell\n     HSET KEY_NAME FIELD VALUE\n     ```\n\n     示例代码：\n\n     ```shell\n     redis 127.0.0.1:6379> hset user:001 id 1\n     ok\n     ```\n\n   - hget\n\n     >hget命令用于返回哈希表中指定字段的值。返回值为指定字段的值，如果指定字段或key不存在时，返回nil。\n\n     基本语法：\n\n     ```shell\n     hget key_name field_name\n     ```\n\n     示例代码：\n\n     ```shell\n     redis 127.0.0.1:6379> hset user:001 name lisi\n     ok\n     redis 127.0.0.1:6379> hget user:001 name\n     lisi\n     ```\n\n   - hmset\n\n     > hmset命令用于同时将多个field-value设置到哈希表中，此命令会覆盖哈希表中已存在的字段，如果哈希表不存在，会创建一个空的哈希表，并执行还没set命令。如果命令执行成功，则返回ok。\n\n     基本语法：\n\n     ```shell\n     hmset key_name field1 value1 ... fieldn valuen\n     ```\n\n     示例代码：\n\n     ```shell\n     redis 127.0.0.1:6379> hmset user:001 id 1 name zhangsan age 18\n     ok\n     ```\n\n   - hmget\n\n     > hmget命令用于返回哈希表中的一个或多个指定字段的值，如果指定的字段不存在于哈希表，会返回一个nil。如果命令执行成功，返回一个包含多个指定字段关联值的表，顺序与指定字端的请求顺序一样。\n\n     基本语法：\n\n     ```shell\n     hmget key_name field1 ... fieldn\n     ```\n\n     示例代码：\n\n     ```shell\n     redis 127.0.0.1:6379> hmset user:001 id 1 name lisi age 18\n     ok\n     redis 127.0.0.1:6379> hmget user:001 id name age\n     1\n     lisi\n     18\n     ```\n\n   - hgetall\n\n     > hgetall命令用于返回哈希表中，所有的字段和值。在返回值里，紧跟每个字段名之后的是字段的值，所以返回值的长度是哈希表长的两倍。如果key不存在，返回空列表。\n\n     基本语法：\n\n     ```shell\n     hgetall key_name\n     ```\n\n     示例代码：\n\n     ```shell\n     redis 127.0.0.1:6379> hmset user:001 id 1 name lisi\n     ok\n     redis 127.0.0.1:6379> hgetall user:001\n     id\n     1\n     name\n     lisi\n     ```\n\n   - hdel\n\n     > hdel命令用于删除哈希表key中d阿一个或多个指定字段，不存在的字段将会忽略。命令执行成功会返回被删除字段的数量，不包括被忽略的字段。\n\n     基本语法：\n\n     ```shell\n     hdel key_name field1 ... fieldn\n     ```\n\n     示例代码：\n\n     ```shell\n     redis 127.0.0.1:6379> hset user:001 id 1 age 18\n     ok\n     redis 127.0.0.1:6379> hdel user:001 id\n     1\n     ```\n\n2. hlen\n\n   > hlen命令用于获取哈希表中字段的数量。返回值为哈希表中字段的数量，若key不存在时，返回0。\n\n   基本语法：\n\n   ```shell\n   hlen key_name\n   ```\n\n   示例代码：\n\n   ```shell\n   redis 127.0.0.1:6379> hmset user:001 id 1 name lisi age 18\n   ok\n   redis 127.0.0.1:6379> hlen user:001\n   3\n   ```\n\n3. hexists key\n\n   > hexists命令用于查看哈希表的指定字段是否存在，返回结果为1时，代表哈希表含有指定的字段；返回结果为0时，\n\n   基本语法：\n\n   ```shell\n   hexists key field_name\n   ```\n\n   示例代码：\n\n   ```shell\n   redis 127.0.0.1:6379> hmset user:001 id 1 name lisi age 18\n   ok\n   redis 127.0.0.1:6379> hexists user:001 id\n   1\n   ```\n\n4. hkeys/hvals\n\n   - hkeys\n\n     > hkeys命令用于查看哈希表中的字段名，可以理解为Map集合的keySet方法，返回值为哈希表中的所有的字段，当key不存在时，返回一个空列表。\n\n     基本语法：\n\n     ```shell\n     hkeys key_name\n     ```\n\n     示例代码：\n\n     ```shell\n     redis 127.0.0.1:6379> hmset user:001 id 1 name lisi age 18\n     ok\n     redis 127.0.0.1:6379> hkeys user:001\n     id\n     name\n     age\n     ```\n\n   - hvals\n\n     > hvals命令用于获取哈希表中所有字段的值。命令执行成功会返回一个包含所有哈希表中所有字段的值，若可以不存在，返回一个空列表。\n\n     基本语法：\n\n     ```shell\n     hvals key_name\n     ```\n\n     示例代码：\n\n     ```shell\n     redis 127.0.0.1:6379> hmset user:001 id 1 name lisi age 18\n     ok\n     redis 127.0.0.1:6379> hvals user:001\n     1\n     lisi\n     18\n     ```\n\n5. hincrby/hincrbyfloat\n\n   - hincrby\n\n     > hincrby命令用于为哈希表中字段的值加上指定的增量值，增量值也可以是一个负数，相当于对哈希表中的字段值进行减操作。若key不存在，则会创建新的哈希表并进行hincrby操作。如果指定的字段不存在，则该字段的初始值为0。\n     >\n     > 命令执行成功后，返回被修改后的字段的值。\n     >\n     > PS：对存储字符串值的字段进行hincrby命令则会返回一个错误。另外本操作的值被限制在 64 位(bit)有符号数字表示之内。\n\n     基本语法：\n\n     ```shell\n     hincrby key_name field_name incr_by_number\n     ```\n\n     示例代码：\n\n     ```shell\n     redis 127.0.0.1:6379> hmset user:001 id 1 name lisi age 18\n     ok\n     redis 127.0.0.1:6379> hincrby user:001 age 2\n     20\n     ```\n\n   - hincrbyfloat\n\n     > hincrbyfloat命令用于为哈希表中字段的值加上指定的浮点增量值。如果指定的字段不存在，则该字段的初始值为0。\n     >\n     > 命令执行成功后，返回被修改后的字段的值。\n\n     基本语法：\n\n     ```shell\n     hincrbyfloat key_name field_name incr_by_number\n     ```\n\n     示例代码：\n\n     ```shell\n     redis 127.0.0.1:6379> hset user:001 weight 60.5 height 170\n     ok\n     redis 127.0.0.1:6379> hincrbyfloat user:001 weight 0.5\n     61.0\n     ```\n\n6. hsetnx\n\n   > hsetnx命令用于为哈希表中不存在的字段赋值，如果字段已经存在在哈希表中，则操作失效。\n   >\n   > 如果哈希表不存在，一个新的哈希表被创建并进行 HSET 操作。\n   >\n   > 如果 key 不存在，一个新哈希表被创建并执行 HSETNX 命令。\n   >\n   > 设置成功，返回 1 。 如果给定字段已经存在且没有操作被执行，返回 0 。\n\n   基本语法：\n\n   ```shell\n   hsetnx key_name field value\n   ```\n\n   示例代码：\n\n   ```shell\n   redis 127.0.0.1:6379> hsetnx user:001 address local\n   (integer) 1\n   ```",
        "category": "文章",
        "cover": null,
        "language": null,
        "externalLink": null,
        "componentName": null,
        "viewNum": 40,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1608812742599245826",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2024-02-27 17:28:04",
        "updateTime": "2024-03-11 23:55:12",
        "user": {
          "id": "1608812742599245826",
          "planetCode": "5185",
          "userName": "葛成",
          "userAvatar": "https://thirdwx.qlogo.cn/mmopen/vi_32/sqZ24tHwumJ8fHiabmZOqemicECaic6INZmtXAOzf6lXq4P7NaPwiaCLW29O7cc3v1JGibnMuse3mJcVNCtnw4LBwrQ/132",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": null,
          "goal": null,
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 3,
          "followNum": 1,
          "followStatus": null,
          "vipExpireTime": "2024-04-22 12:22:23",
          "lastLoginTime": null,
          "createTime": "2022-12-30 21:10:22",
          "updateTime": "2024-02-24 10:11:42"
        },
        "tags": [
          "文章",
          "笔记",
          "Redis"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1762022491125047297",
        "title": "大四java-准备春招",
        "description": "简历",
        "content": "鱼皮哥，今年大四了，准备参加现在的春招，\n- 想找您看看目前建立还有什么问题么？\n- 我一直没输过算法题，现在刷是不是没有必要了？\n- 我一直到现在才约了3场面试，感觉很紧张，我很头疼这个问题。。。\n\n![c3acbdb62bcbf87aa1250af72e695c0.png](https://pic.code-nav.cn/post_picture/1681534941206155266/fKEyG721-c3acbdb62bcbf87aa1250af72e695c0.png)",
        "category": "文章",
        "cover": null,
        "language": null,
        "externalLink": null,
        "componentName": null,
        "viewNum": 261,
        "thumbNum": 4,
        "favourNum": 4,
        "commentNum": 0,
        "priority": 0,
        "userId": "1681534941206155266",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2024-02-26 15:51:13",
        "updateTime": "2024-03-12 20:59:34",
        "user": {
          "id": "1681534941206155266",
          "planetCode": "24896",
          "userName": "放纵",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1681534941206155266/8TcWogu9-csdn头像.jpg",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": null,
          "goal": null,
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 0,
          "followNum": 0,
          "followStatus": null,
          "vipExpireTime": "2024-07-19 12:46:39",
          "lastLoginTime": null,
          "createTime": "2023-07-19 13:22:26",
          "updateTime": "2024-02-26 15:29:44"
        },
        "tags": [
          "文章",
          "简历"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1761043295141748738",
        "title": "MySQL学习",
        "description": "关于MySQL约束的学习",
        "content": "## 约束\n#### 1、概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据。\n#### 2、目的：保证数据库中数据的正确、有效性和完整性。\n#### 3、分类：\n\n| 约束 | 描述 |  关键字  | \n| --- | --- |---|\n| 非空约束 | 限制该字段的数据不能为null | not null|\n|唯一约束|\t保证该字段的所有数据都是唯一，不重复\t|unique|\n|主键约束|\t主键是一行数据的唯一标识，要求非空且唯一（自增：auto_increment）|\tprimary key|\n|默认约束\t|保存数据时，如果未指定该字段的值，则采用默认值\t|default|\n|检查约束（8.0.16版本之后）|保证字段值满足某一个条件\t|check|\n|外键约束\t|用来让两张表的数据之间建立连接，保证数据的一致性和完整性|\tforeign key|\n\n*注意：\n约束是作用于表中字段上的，可以创建表/修改表的时候添加约束。*\n\n外键约束：\n具有外键的是子表，外键所关联的是父表\n语法如下：\n\n```sql\n-- 添加外键\ncreate table 表名(\n  字段名 数据类型，\n  ...\n  [constraint] [外键名称] foreign key(外键名称) references 主表(主表列名)\n  \n);\n-- 或者\nalter table 表名 add constraint 外键名称 foreign key(外键字段名) references 主表(主表列名)\n```\n\n```sql\n-- 删除外键\nalter table 表名 drop foreign key 外键名称 \n\n```\n外键的删除/更新行为\n\n| 行为 | 说明 |\n| --- | --- |\n| no action | 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新。(与RESTRICT一致) |\n| restrict | 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新。(与NOACTON 一致) |\n| cascade | 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有，则也删除/更新外键在子表中的记录。 |\n| set null | 当在父表中删除对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为nul(这就要求该外键允许取null)。 |\n| set default | 父表有变更时，子表将外键列设置成一个默认的值(Innodb不支持) |\n\n设置外键行为语法\n\n```sql\nalter table 表名 add constraint 外键名称 foreign key (外键字段) references 主表名(主表字段名) on update cascade on delete cascade\n-- on updae 意思是在更新时采取什么行为\n-- on delete 意思是在删除时采取什么行为\n```\n",
        "category": "文章",
        "cover": null,
        "language": null,
        "externalLink": null,
        "componentName": null,
        "viewNum": 49,
        "thumbNum": 0,
        "favourNum": 2,
        "commentNum": 0,
        "priority": 0,
        "userId": "1747537878507896833",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2024-02-23 23:00:14",
        "updateTime": "2024-03-08 21:32:28",
        "user": {
          "id": "1747537878507896833",
          "planetCode": "32623",
          "userName": "划船不用桨",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1747537878507896833/ZVW3Wp8C-微信图片_20240221213145.jpg",
          "gender": 1,
          "userProfile": "打工仔一个",
          "userRole": "vip",
          "interests": [],
          "place": null,
          "birthday": "1997-09-03",
          "school": "",
          "major": null,
          "education": "专科",
          "graduationYear": 2021,
          "jobStatus": "已工作",
          "company": null,
          "job": "后端",
          "workYear": 2,
          "direction": "后端",
          "goal": "社招",
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 0,
          "followNum": 0,
          "followStatus": null,
          "vipExpireTime": "2025-02-18 08:59:43",
          "lastLoginTime": null,
          "createTime": "2024-01-17 16:34:32",
          "updateTime": "2024-02-22 09:18:45"
        },
        "tags": [
          "文章",
          "数据库"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      }
    ],
    "total": "4161",
    "size": "8",
    "current": "1",
    "orders": [],
    "optimizeCountSql": true,
    "searchCount": true,
    "countId": null,
    "maxLimit": null,
    "pages": "521"
  },
  "message": "ok"
}